//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""60664352-aadd-40cb-87ab-a2c96dc4d0cb"",
            ""actions"": [
                {
                    ""name"": ""BiteA"",
                    ""type"": ""Button"",
                    ""id"": ""77d096fd-a992-44d3-839b-5bf80b4e1c8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BiteS"",
                    ""type"": ""Button"",
                    ""id"": ""4068ecde-a2fd-44b2-80db-4ee0da62234d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BiteD"",
                    ""type"": ""Button"",
                    ""id"": ""0960c085-1053-4fe5-ab21-784fe1fac5d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BiteF"",
                    ""type"": ""Button"",
                    ""id"": ""6fb1d424-8469-479d-b23e-91d8ce7787d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BiteJ"",
                    ""type"": ""Button"",
                    ""id"": ""b0972076-5fbf-4992-91c8-d6819f6592e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BiteK"",
                    ""type"": ""Button"",
                    ""id"": ""1f3c1dcd-bacc-4a31-b31e-045d99501427"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BiteL"",
                    ""type"": ""Button"",
                    ""id"": ""abf29393-af52-47f5-bbc7-fda4749ce9b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BitePlus"",
                    ""type"": ""Button"",
                    ""id"": ""9a0d3b71-e9c6-4ded-8b1c-c99d6065a78d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e5e64d8-6215-44a2-bcf2-a00abf0aa133"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BiteA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6683dd19-a1c5-4c76-aa77-ce72c8b5bc22"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BiteS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e292dacb-3925-4ab9-af69-b80b9e0ec7ee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BiteD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b87e4c0-3333-4725-93ed-15a7e41423d1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BiteF"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3253a8ba-2c24-48b1-a736-db7469d537b9"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BiteJ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6634af9-e9fe-429a-bdb1-558bc2de2664"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BiteK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9419702f-b7c9-4f85-99ec-a12745be115e"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BiteL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76980d2d-f63f-4bb4-9c27-c50bba8bbcf6"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BitePlus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_BiteA = m_Player.FindAction("BiteA", throwIfNotFound: true);
        m_Player_BiteS = m_Player.FindAction("BiteS", throwIfNotFound: true);
        m_Player_BiteD = m_Player.FindAction("BiteD", throwIfNotFound: true);
        m_Player_BiteF = m_Player.FindAction("BiteF", throwIfNotFound: true);
        m_Player_BiteJ = m_Player.FindAction("BiteJ", throwIfNotFound: true);
        m_Player_BiteK = m_Player.FindAction("BiteK", throwIfNotFound: true);
        m_Player_BiteL = m_Player.FindAction("BiteL", throwIfNotFound: true);
        m_Player_BitePlus = m_Player.FindAction("BitePlus", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_BiteA;
    private readonly InputAction m_Player_BiteS;
    private readonly InputAction m_Player_BiteD;
    private readonly InputAction m_Player_BiteF;
    private readonly InputAction m_Player_BiteJ;
    private readonly InputAction m_Player_BiteK;
    private readonly InputAction m_Player_BiteL;
    private readonly InputAction m_Player_BitePlus;
    public struct PlayerActions
    {
        private @GameInputs m_Wrapper;
        public PlayerActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @BiteA => m_Wrapper.m_Player_BiteA;
        public InputAction @BiteS => m_Wrapper.m_Player_BiteS;
        public InputAction @BiteD => m_Wrapper.m_Player_BiteD;
        public InputAction @BiteF => m_Wrapper.m_Player_BiteF;
        public InputAction @BiteJ => m_Wrapper.m_Player_BiteJ;
        public InputAction @BiteK => m_Wrapper.m_Player_BiteK;
        public InputAction @BiteL => m_Wrapper.m_Player_BiteL;
        public InputAction @BitePlus => m_Wrapper.m_Player_BitePlus;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @BiteA.started += instance.OnBiteA;
            @BiteA.performed += instance.OnBiteA;
            @BiteA.canceled += instance.OnBiteA;
            @BiteS.started += instance.OnBiteS;
            @BiteS.performed += instance.OnBiteS;
            @BiteS.canceled += instance.OnBiteS;
            @BiteD.started += instance.OnBiteD;
            @BiteD.performed += instance.OnBiteD;
            @BiteD.canceled += instance.OnBiteD;
            @BiteF.started += instance.OnBiteF;
            @BiteF.performed += instance.OnBiteF;
            @BiteF.canceled += instance.OnBiteF;
            @BiteJ.started += instance.OnBiteJ;
            @BiteJ.performed += instance.OnBiteJ;
            @BiteJ.canceled += instance.OnBiteJ;
            @BiteK.started += instance.OnBiteK;
            @BiteK.performed += instance.OnBiteK;
            @BiteK.canceled += instance.OnBiteK;
            @BiteL.started += instance.OnBiteL;
            @BiteL.performed += instance.OnBiteL;
            @BiteL.canceled += instance.OnBiteL;
            @BitePlus.started += instance.OnBitePlus;
            @BitePlus.performed += instance.OnBitePlus;
            @BitePlus.canceled += instance.OnBitePlus;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @BiteA.started -= instance.OnBiteA;
            @BiteA.performed -= instance.OnBiteA;
            @BiteA.canceled -= instance.OnBiteA;
            @BiteS.started -= instance.OnBiteS;
            @BiteS.performed -= instance.OnBiteS;
            @BiteS.canceled -= instance.OnBiteS;
            @BiteD.started -= instance.OnBiteD;
            @BiteD.performed -= instance.OnBiteD;
            @BiteD.canceled -= instance.OnBiteD;
            @BiteF.started -= instance.OnBiteF;
            @BiteF.performed -= instance.OnBiteF;
            @BiteF.canceled -= instance.OnBiteF;
            @BiteJ.started -= instance.OnBiteJ;
            @BiteJ.performed -= instance.OnBiteJ;
            @BiteJ.canceled -= instance.OnBiteJ;
            @BiteK.started -= instance.OnBiteK;
            @BiteK.performed -= instance.OnBiteK;
            @BiteK.canceled -= instance.OnBiteK;
            @BiteL.started -= instance.OnBiteL;
            @BiteL.performed -= instance.OnBiteL;
            @BiteL.canceled -= instance.OnBiteL;
            @BitePlus.started -= instance.OnBitePlus;
            @BitePlus.performed -= instance.OnBitePlus;
            @BitePlus.canceled -= instance.OnBitePlus;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnBiteA(InputAction.CallbackContext context);
        void OnBiteS(InputAction.CallbackContext context);
        void OnBiteD(InputAction.CallbackContext context);
        void OnBiteF(InputAction.CallbackContext context);
        void OnBiteJ(InputAction.CallbackContext context);
        void OnBiteK(InputAction.CallbackContext context);
        void OnBiteL(InputAction.CallbackContext context);
        void OnBitePlus(InputAction.CallbackContext context);
    }
}
